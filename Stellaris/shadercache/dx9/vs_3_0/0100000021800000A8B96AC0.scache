#define VERTEX_SHADER
#define SHADERQUALITY_HIGH
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
float4x4 ViewProjectionMatrix : register(c0);
float4 TimeRot : register(c4);

struct VS_INPUT
{
	float2 vPosition : POSITION;
	float2 vUV : TEXCOORD0;
	float3 vPos : TEXCOORD1;
	float2 vSize_vRot : TEXCOORD2;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vUV : TEXCOORD0;
	float2 vPos : TEXCOORD1;
	float4 vScreenCoord : TEXCOORD2;
};
		VS_OUTPUT main(const VS_INPUT v )
		{
			VS_OUTPUT Out;
			float4 vPos = float4( v.vPosition.x, -9.0f, v.vPosition.y, 1.0f );	
			vPos.xz *= v.vSize_vRot.x;
			float vTimeRot = TimeRot.x * ( -saturate( -v.vSize_vRot.y * 1000.0f ) + saturate( v.vSize_vRot.y * 1000.0f ) );
			float randSin = sin( v.vSize_vRot.y + vTimeRot );
			float randCos = cos( v.vSize_vRot.y + vTimeRot );
			
			vPos.xz = float2( 
				vPos.x * randCos - vPos.z * randSin, 
				vPos.x * randSin + vPos.z * randCos );		
			
			vPos.xyz += v.vPos;
			vPos.y += ( v.vPosition.x + v.vPosition.y ) * 0.5f * 10.f;
			
			Out.vPosition  	= mul( ViewProjectionMatrix, vPos );
			Out.vUV			= v.vUV;
			Out.vPos		= vPos.xz;

			Out.vScreenCoord.x = ( Out.vPosition.x * 0.5 + Out.vPosition.w * 0.5 );
			Out.vScreenCoord.y = ( Out.vPosition.w * 0.5 - Out.vPosition.y * 0.5 );
		#ifdef PDX_OPENGL
			Out.vScreenCoord.y = -Out.vScreenCoord.y;
		#endif	
			Out.vScreenCoord.z = Out.vPosition.w;
			Out.vScreenCoord.w = Out.vPosition.w;	

			return Out;
		}
		
	