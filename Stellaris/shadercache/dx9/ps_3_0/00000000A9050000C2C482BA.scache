#define PIXEL_SHADER
#define SHADERQUALITY_HIGH
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
sampler CubeMapTexture : register(s0);
sampler ColorCube : register(s1);
float4x4 ViewProjectionMatrix : register(c0);
float3 vCamPos : register(c4);
float3 vCamRightDir : register(c5);
float3 vCamLookAtDir : register(c6);
float3 vCamUpDir : register(c7);
float3 HdrRange_Time_ClipHeight : register(c8);
float4 SystemLightPosRadius : register(c9);
float4 SystemLightColorFalloff : register(c10);
float3 SystemBackLightDiffuse : register(c11);
float4 BATCHED_VARIABLES_1 : register(c12);
#define AmbientDiffuse BATCHED_VARIABLES_1.xyz
#define CubemapIntensity BATCHED_VARIABLES_1.w
float3 CamLightDiffuse[3] : register(c13);
float3 RimLightDiffuse : register(c16);

float4x4 InvViewProjMatrix : register(c0);
float4 vCameraPos : register(c4);
float4 BATCHED_VARIABLES_2 : register(c5);
#define vHsvShift BATCHED_VARIABLES_2.xyz
#define vIntel BATCHED_VARIABLES_2.w
float vSkyTime : register(c6);

struct VS_INPUT
{
	float2 vPosition : POSITION;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float3 vPos : TEXCOORD0;
};

// --------------------------------------------------------------
// ------------------    Light          -------------------------
// --------------------------------------------------------------
static const float3 SUN_DIFFUSE					= float3( 0.226f, 0.182f, 0.36f );


// --------------------------------------------------------------
// ------------------    HDR          	-------------------------
// --------------------------------------------------------------
static const float3 LUMINANCE_VECTOR  			= float3(0.2125f, 0.7154f, 0.0721f);


// --------------------------------------------------------------
// ------------------    Specular       -------------------------
// --------------------------------------------------------------
static const float SPECULAR_WIDTH 				= 15.0f;
static const float SPECULAR_MULTIPLIER			= 1.0f;
static const float MAP_SPECULAR_WIDTH 			= 15.0f;
static const float MAP_SPECULAR_MULTIPLIER		= 0.05f;


// --------------------------------------------------------------
// ------------------       ROADS       -------------------------
// --------------------------------------------------------------
static const float ROAD_TILE_FREQ				= 16.0f;
static const float ROAD_FADE_START				= 1.0f;
static const float ROAD_FADE_END				= 4.0f;

static const float ROAD_MAXIMAP_TILE_FREQ		= 30.f;
static const float ROAD_MAXIMAP_EXTRA_WIDTH		= 0.3f;

static const float ROAD_MINIMAP_TILE_FREQ		= 15.f;
static const float ROAD_MINIMAP_EXTRA_WIDTH		= 0.0f;


// --------------------------------------------------------------
// ------------------       COMBAT       ------------------------
// --------------------------------------------------------------
static const float COMBAT_OUTSIDE_BOUNDS_BRIGHTNESS	= 0.45f;
static const float COMBAT_INSIDE_BOUNDS_BRIGHTNESS	= 0.99f;
static const float COMBAT_BOUNDS_SHARPNESS 			= 0.1f;
static const float COMBAT_BOUNDS_BORDER_SHARPNESS	= 3.0f;


// --------------------------------------------------------------
// ------------------    WATER          -------------------------
// --------------------------------------------------------------
static const float 	WATER_TILE					= 1.8f;
static const float 	WATER_TIME_SCALE			= 0.03f;
static const float	WATER_FOG_START				= 16.5f;
static const float	WATER_FOG_END				= 19.7f;

static const float WATER_HEIGHT 				= 20.0f;
static const float WATER_HEIGHT_RECP 			= 1.0f / WATER_HEIGHT;
static const float WATER_HEIGHT_RECP_SQUARED 	= WATER_HEIGHT_RECP * WATER_HEIGHT_RECP;

static const float HEL_WATER_SCALE				= 1.2f;
static const float HEL_WATER_SPEED 				= 0.03f;
static const float HEL_WATER_GLOW_NOISE_SPEED	= 0.08f;
static const float HEL_WATER_GLOW_NOISE_SCALE   = 0.006f;


// --------------------------------------------------------------
// ------------------    SHADOW         -------------------------
// --------------------------------------------------------------
static const float  SHADOW_WEIGHT_TERRAIN    	= 1.0f;
static const float  SHADOW_WEIGHT_WATER   		= 1.0f;
static const float  SHADOW_WEIGHT_RIVER   		= 1.0f;
static const float  SHADOW_WEIGHT_TREE   		= 1.0f;
static const float  SHADOW_WEIGHT_ROAD   		= 1.0f;
static const float  SHADOW_WEIGHT_MESH   		= 1.0f;

// --------------------------------------------------------------
// -------------    RIM LIGHT (PDXMESH)   -----------------------
// --------------------------------------------------------------
static const float 	RIM_START 		= 0.6f;
static const float 	RIM_END 		= 1.0f;
static const float4 RIM_COLOR 		= float4( 0.3f, 0.6f, 0.8f, 0.0f );

float3 ToGamma(float3 aLinear)
{
	return pow(aLinear, vec3(0.45));
}

float3 ToLinear(float3 aGamma)
{
	return pow(aGamma, vec3(2.2));
}

float4 ToLinear(float4 aGamma)
{
	return float4(pow(aGamma.rgb, vec3(2.2)), aGamma.a);
}
	// Photoshop filters, kinda...
	float3 Hue( float H )
	{
		float X = 1 - abs( ( mod( H, 2 ) ) - 1 );
		if ( H < 1.0f )			return float3( 1.0f,    X, 0.0f );
		else if ( H < 2.0f )	return float3(    X, 1.0f, 0.0f );
		else if ( H < 3.0f )	return float3( 0.0f, 1.0f,    X );
		else if ( H < 4.0f )	return float3( 0.0f,    X, 1.0f );
		else if ( H < 5.0f )	return float3(    X, 0.0f, 1.0f );
		else					return float3( 1.0f, 0.0f,    X );
	}

	float3 HSVtoRGB( in float3 aHSV )
	{
		if ( aHSV.y != 0.0f )
		{
			float C = aHSV.y * aHSV.z;
			return clamp( Hue( aHSV.x ) * C + ( aHSV.z - C ), 0.0f, 1.0f );
		}
		return saturate( aHSV.zzz );
	}

	float3 RGBtoHSV( in float3 RGB )
	{
		float Cmax = max( RGB.r, max( RGB.g, RGB.b ) );
		float Cmin = min( RGB.r, min( RGB.g, RGB.b ) );
		float diff = Cmax - Cmin;

		float H = 0.0;
		float S = 0.0;
		if (diff != 0.0)
		{
			S = diff / Cmax;

			if (Cmax == RGB.r)
				H = (RGB.g - RGB.b) / diff + 6.0;
			else if (Cmax == RGB.g)
				H = (RGB.b - RGB.r) / diff + 2.0;
			else
				H = (RGB.r - RGB.g) / diff + 4.0;
		}

		return float3(H, S, Cmax);
	}


	float3 GetOverlay( float3 vColor, float3 vOverlay, float vOverlayPercent )
	{
		float3 res;
		res.r = vOverlay.r < .5 ? (2 * vOverlay.r * vColor.r) : (1 - 2 * (1 - vOverlay.r) * (1 - vColor.r));
		res.g = vOverlay.g < .5 ? (2 * vOverlay.g * vColor.g) : (1 - 2 * (1 - vOverlay.g) * (1 - vColor.g));
		res.b = vOverlay.b < .5 ? (2 * vOverlay.b * vColor.b) : (1 - 2 * (1 - vOverlay.b) * (1 - vColor.b));

		return lerp( vColor, res, vOverlayPercent );
	}

	float3 Levels( float3 vInColor, float vMinInput, float vMaxInput )
	{
		float3 vRet = saturate( vInColor - vMinInput );
		vRet /= vMaxInput - vMinInput;
		return saturate( vRet );
	}
	
	static const float3 STANDARD_vDiffuseLight = float3( 1.4f, 1.2f, 1.0f );
	static const float  STANDARD_vIntensity    = 1.f;
	static const float STANDARD_HDR_RANGE 	= 0.9f;
	static const float MAX_SPECULAR_NORMALIZATION_FACTOR = 5.f;

	const static float SNOW_RIDGE_START_HEIGHT 	= 22.0f;
	const static float SNOW_NORMAL_START 	= 0.3f;
	const static float3 SNOW_COLOR = float3( 0.7f, 0.7f, 0.8f );

	float3 ApplySnow( float3 vColor, float3 vPos, inout float3 vNormal, inout float vSpecular, inout float vSpecularPower, float vIsSnow, in sampler2D SnowDiffuse )
	{
		float vNormalFade = saturate( 0.2f + saturate( ( vNormal.y - SNOW_NORMAL_START ) * 1.0f ) );

		float vNoise = tex2D( SnowDiffuse, ( vPos.xz + 0.5f ) / 30.0f  ).r;
		float vSnowTexture = tex2D( SnowDiffuse, ( vPos.xz + 0.5f ) / 10.0f  ).r;


		//Increase snow on ridges
		//vNoise -= saturate( vPos.y - SNOW_RIDGE_START_HEIGHT )*( saturate( (vNormal.y-0.9f) * 20.0f )*vIsSnow );
		//vNoise = saturate( vNoise );

		float vSnow = saturate( ( vIsSnow - vNoise ) * 2.0f ) * vNormalFade;
		float vFrost = saturate( vIsSnow - saturate( vNoise - 0.5f ) );

		vColor = lerp( vColor, SNOW_COLOR * ( 0.9f + 0.1f * vSnowTexture), saturate( vSnow + vFrost * 0.5f ) );

		vSpecular += vSnow * 0.2f;
		vSpecularPower *= 1.f - vFrost * 0.9f;
		return vColor;
	}

	float3 UnpackNormal( in sampler2D NormalTex, float2 uv )
	{
		float3 vNormalSample = normalize( tex2D( NormalTex, uv ).rgb - 0.5f );
		vNormalSample.g = -vNormalSample.g;
		return vNormalSample;
	}

	float3 GetCloudColor( float3 vPosition, float vTime, in sampler2D CloudTexture )
	{
		float2 vCloudUV = vPosition.xz * 0.002f;
		vCloudUV.x += vTime * 0.0011f;
		vCloudUV.y += vTime * 0.0031f;
		float3 vCloud = tex2D( CloudTexture, vCloudUV ).rgb;
		vCloudUV *= 1.1f;
		vCloudUV.x -= vTime * 0.0007f;
		return min( vCloud, tex2D( CloudTexture, vCloudUV ).rgb );
	}

	struct PointLight
	{
		float3 _Position;
		float _Radius;
		float3 _Color;
		float _Falloff;
	};

	PointLight GetPointLight(float4 PositionAndRadius, float4 ColorAndFalloff)
	{
		PointLight pointLight;
		pointLight._Position = PositionAndRadius.xyz;
		pointLight._Radius = PositionAndRadius.w;
		pointLight._Color = ColorAndFalloff.xyz;
		pointLight._Falloff = ColorAndFalloff.w;
		return pointLight;
	}

	struct LightingProperties
	{
		float3 _WorldSpacePos;
		float3 _ToCameraDir;
		float3 _Normal;
		float3 _Diffuse;

		float3 _SpecularColor;
		float _Glossiness;
		float _NonLinearGlossiness;
	};
	// Direct lighting
	float3 FresnelSchlick(float3 SpecularColor, float3 E, float3 H)
	{
		return SpecularColor + (vec3(1.0f) - SpecularColor) * pow(1.0 - saturate(dot(E, H)), 5.0);
	}

	// Indirect lighting
	float3 FresnelGlossy(float3 SpecularColor, float3 E, float3 N, float Smoothness)
	{
		return SpecularColor + (max(vec3(Smoothness), SpecularColor) - SpecularColor) * pow(1.0 - saturate(dot(E, N)), 5.0);
	}

	float3 MetalnessToDiffuse(float MetalnessIn, float3 DiffuseIn)
	{
		return lerp(DiffuseIn, vec3(0.0), MetalnessIn);
	}

	float3 MetalnessToSpec(float MetalnessIn, float3 DiffuseIn, float SpecIn)
	{
		return lerp(vec3(SpecIn), DiffuseIn, MetalnessIn);
	}

	//------------------------------
	// Phong -----------------------
	//------------------------------
	float3 CalculatePBRSpecularPower( float3 vPos, float3 vNormal, float3 vMaterialSpecularColor, float vSpecularPower, float3 vLightColor, float3 vLightDirIn )
	{
		float3 H = normalize( normalize( vCamPos - vPos ) + -vLightDirIn );
		float NdotH = saturate( dot( H, vNormal ) );
		float NdotL = saturate( dot( -vLightDirIn, vNormal ) );
		float3 vSpecularColor = vLightColor * saturate( pow( NdotH, vSpecularPower ) * SPECULAR_MULTIPLIER ) * vMaterialSpecularColor;
		vSpecularColor = FresnelSchlick( vMaterialSpecularColor * SPECULAR_MULTIPLIER, -vLightDirIn, H) * ((vSpecularPower + 2) / 8 ) * saturate( pow( NdotH, vSpecularPower ) ) * NdotL * vLightColor;
		return vSpecularColor;
	}

	float3 CalculateLight( float3 vNormal, float3 vLightDirection, float3 vLightIntensity )
	{
		float NdotL = dot( vNormal, -vLightDirection );
		return max(NdotL, 0.0) * vLightIntensity;
	}

	void PhongPointLight(PointLight aPointlight, LightingProperties aProperties, inout float3 aDiffuseLightOut, inout float3 aSpecularLightOut)
	{
		float3 lightdir = aProperties._WorldSpacePos - aPointlight._Position;
		float lightdist = length(lightdir);

		float vLightIntensity = saturate((aPointlight._Radius - lightdist) / aPointlight._Falloff);
		if (vLightIntensity > 0)
		{
			lightdir /= lightdist;
			aDiffuseLightOut += CalculateLight(aProperties._Normal, lightdir, aPointlight._Color * vLightIntensity);
			aSpecularLightOut += CalculatePBRSpecularPower(aProperties._WorldSpacePos, aProperties._Normal, aProperties._SpecularColor, aProperties._Glossiness, aPointlight._Color * vLightIntensity, lightdir);
		}
	}



	//------------------------------
	// Blinn-Phong -----------------
	//------------------------------
	float GetNonLinearGlossiness(float aGlossiness)
	{
		return exp2(11.0 * aGlossiness); //exp2(GlossScale * Gloss + GlossBias)
	}

	float GetEnvmapMipLevel(float aGlossiness)
	{
		return (1.0 - aGlossiness) * (8.0);
	}

	void ImprovedBlinnPhong(float3 aLightColor, float3 aToLightDir, LightingProperties aProperties, out float3 aDiffuseLightOut, out float3 aSpecularLightOut)
	{
		float3 H = normalize(aProperties._ToCameraDir + aToLightDir);
		float NdotL = saturate(dot(aProperties._Normal, aToLightDir));
		float NdotH = saturate(dot(aProperties._Normal, H));

		float normalization = (aProperties._NonLinearGlossiness + 2.0) / 8.0;

		//Hack for Stellaris to avoid super-bright specularity that causes bloom
		normalization = min( normalization, MAX_SPECULAR_NORMALIZATION_FACTOR );

		float3 specColor = normalization * pow(NdotH, aProperties._NonLinearGlossiness) * FresnelSchlick(aProperties._SpecularColor, aToLightDir, H);

		aDiffuseLightOut = aLightColor * NdotL;
		aSpecularLightOut = specColor * aLightColor * NdotL;

		//hack to fix unwanted specularity when glossiness == 0
		aSpecularLightOut *= saturate( smoothstep( aProperties._Glossiness, 0.f, 0.05f ) );
	}

	// TODO other, square, falloff?
	void ImprovedBlinnPhongPointLight(PointLight aPointlight, LightingProperties aProperties, inout float3 aDiffuseLightOut, inout float3 aSpecularLightOut)
	{
		float3 posToLight = aPointlight._Position - aProperties._WorldSpacePos;
		float lightDistance = length(posToLight);

		float lightIntensity = saturate((aPointlight._Radius - lightDistance) / aPointlight._Falloff);
		if (lightIntensity > 0)
		{
			float3 toLightDir = posToLight / lightDistance;
			float3 diffLight;
			float3 specLight;
			ImprovedBlinnPhong(aPointlight._Color * lightIntensity, toLightDir, aProperties, diffLight, specLight);
			aDiffuseLightOut += diffLight;
			aSpecularLightOut += specLight;
		}
	}



	//-------------------------------
	// Common lighting functions ----
	//-------------------------------
	void CalculatePointLight(PointLight aPointlight, LightingProperties aProperties, inout float3 aDiffuseLightOut, inout float3 aSpecularLightOut)
	{
	#ifdef PDX_LEGACY_BLINN_PHONG
		PhongPointLight(aPointlight, aProperties, aDiffuseLightOut, aSpecularLightOut);
	#else
		ImprovedBlinnPhongPointLight(aPointlight, aProperties, aDiffuseLightOut, aSpecularLightOut);
	#endif
	}

	void CalculateSystemPointLight(LightingProperties aProperties, float aShadowFactor, inout float3 aDiffuseLightOut, inout float3 aSpecularLightOut)
	{
		PointLight systemPointlight = GetPointLight(SystemLightPosRadius, SystemLightColorFalloff);
		float3 diffLight = vec3(0.0);
		float3 specLight = vec3(0.0);
		CalculatePointLight(systemPointlight, aProperties, diffLight, specLight);
		aDiffuseLightOut += diffLight * aShadowFactor;
		aSpecularLightOut += specLight * aShadowFactor;

		#ifdef IS_PLANET
			float3 vLightDir = normalize( systemPointlight._Position - aProperties._WorldSpacePos );
			diffLight = CalculateLight( aProperties._Normal, vLightDir, SystemBackLightDiffuse );
			aDiffuseLightOut += diffLight * aShadowFactor;
		#endif
	}

	float3 ComposeLight(LightingProperties aProperties, float aAmbientIntensity, float3 aDiffuseLight, float3 aSpecularLight)
	{
		float3 diffuse = ( ( (AmbientDiffuse * aAmbientIntensity) + aDiffuseLight) * aProperties._Diffuse) * HdrRange_Time_ClipHeight.x;
		float3 specular = aSpecularLight;
		return (diffuse + specular);
	}


	//-------------------------------
	// Debugging --------------------
	//-------------------------------
	//#define PDX_DEBUG_NORMAL
	//#define PDX_DEBUG_DIFFUSE
	//#define PDX_DEBUG_SPEC
	//#define PDX_DEBUG_GLOSSINESS
	//#define PDX_DEBUG_SHADOW
	//#define PDX_DEBUG_SUN_LIGHT
	//#define PDX_DEBUG_SUN_LIGHT_WITH_SHADOW
	//#define PDX_DEBUG_SYSTEM_LIGHT
	//#define PDX_DEBUG_AMBIENT
	void DebugReturn(inout float3 aReturn, LightingProperties aProperties, float aShadowTerm)
	{
	#ifdef PDX_DEBUG_NORMAL
		aReturn = saturate(aProperties._Normal);
	#endif

	#ifdef PDX_DEBUG_DIFFUSE
		aReturn = aProperties._Diffuse;
	#endif

	#ifdef PDX_DEBUG_SPEC
		aReturn = aProperties._SpecularColor;
	#endif

	#ifdef PDX_DEBUG_GLOSSINESS
		aReturn = vec3(aProperties._Glossiness);
	#endif

	#ifdef PDX_DEBUG_SHADOW
		aReturn = vec3(aShadowTerm * 0.5f);
	#endif

	#if defined(PDX_DEBUG_SUN_LIGHT) || defined (PDX_DEBUG_SUN_LIGHT_WITH_SHADOW)
		float3 diffuseLight = vec3(0.0);
		float3 specularLight = vec3(0.0);
		aProperties._Diffuse = vec3(0.5);

		#ifdef PDX_DEBUG_SUN_LIGHT_WITH_SHADOW
			CalculateSunLight(aProperties, aShadowTerm, diffuseLight, specularLight);
		#else
			CalculateSunLight(aProperties, 1.0, diffuseLight, specularLight);
		#endif

		aReturn = ComposeLight(aProperties, 1.0f, diffuseLight, specularLight);
	#endif

	#ifdef PDX_DEBUG_SYSTEM_LIGHT
		float3 diffuseLight = vec3(0.0);
		float3 specularLight = vec3(0.0);
		aProperties._Diffuse = vec3(1.0);
		CalculateSystemPointLight(aProperties, 1.0, diffuseLight, specularLight);
		aReturn = ComposeLight(aProperties, 1.0f, diffuseLight, specularLight);
	#endif

	#ifdef PDX_DEBUG_AMBIENT
		aReturn = AmbientDiffuse * aProperties._Diffuse;
	#endif

	#ifdef PDX_DEBUG_CAMERA_LIGHTS
		float3 diffuseLight = vec3(0.0);
		float3 specularLight = vec3(0.0);
		aProperties._Diffuse = vec3(1.0);
		CalculateCameraLights( aProperties, 1.0f, diffuseLight, specularLight );
		aReturn = ComposeLight( aProperties, 1.0f, diffuseLight, specularLight );
	#endif
	}

		float3 UnpackRRxGNormal(float4 NormalMapSample)
	{
		float x = NormalMapSample.g * 2.0 - 1.0;
		float y = NormalMapSample.a * 2.0 - 1.0;
		y = -y;
		float z = sqrt(saturate(1.0 - x * x - y * y));
		return float3(x, y, z);
	}
		float3 SampleColorCube( float3 aColor, in sampler2D ColorCubeSampler )
	{	
		float ColorCubeSize = 32.0;
		float scale = (ColorCubeSize - 1.0) / ColorCubeSize;
		float offset = 0.5 / ColorCubeSize;
		
		float x = ((scale * aColor.r + offset) / ColorCubeSize);
		float y = scale * aColor.g + offset;
		
		float zFloor = floor((scale * aColor.b + offset) * ColorCubeSize);
		float xOffset1 = zFloor / ColorCubeSize;
		float xOffset2 = min(ColorCubeSize - 1.0, zFloor + 1.0) / ColorCubeSize;
		
		float3 color1 = tex2D( ColorCubeSampler, float2(x + xOffset1, y) ).rgb;
		float3 color2 = tex2D( ColorCubeSampler, float2(x + xOffset2, y) ).rgb;
		
		float3 color = lerp(color1, color2, scale * aColor.b * ColorCubeSize - zFloor );
			
		return color;
	}
			//float3 ToLinear(float3 aGamma)
		//{
		//	return pow(aGamma, vec3(2.2));
		//}
		//
		//float3 ToGamma(float3 aLinear)
		//{
		//	return pow(aLinear, vec3(0.45));
		//}
		float4 main( VS_OUTPUT v ) : PDX_COLOR
		{			
			float3 vTexCoord = normalize( v.vPos - vCameraPos.xyz );
			//vTexCoord.z = -vTexCoord.z; //<-- This will mirror it
			
			#ifdef YCOCG
				float4 vColor2 = texCUBE( CubeMapTexture, vTexCoord );
				float scale = ( vColor2.z * ( 255.0 / 8.0 ) ) + 1.0;
				float Co = ( vColor2.x - ( 0.5 * 256.0 / 255.0 ) ) / scale;
				float Cg = ( vColor2.y - ( 0.5 * 256.0 / 255.0 ) ) / scale;
				float Y = vColor2.w;
				float R = Y + Co - Cg;
				float G = Y + Cg;
				float B = Y - Co - Cg;
				float3 vColor = ToLinear( float3(R,G,B) );
			#else
				float3 vColor = texCUBE( CubeMapTexture, vTexCoord ).rgb;
			#endif
			
			float3 vHSV = RGBtoHSV( vColor.rgb );
			float3 vShift = vHsvShift;
			const float HUE_MAX = 6.0f;			
			vShift.x *= HUE_MAX;
			#ifdef PDX_OPENGL
				vHSV.x = mod( HUE_MAX + vHSV.x + vShift.x, HUE_MAX );
			#else
				vHSV.x = fmod( HUE_MAX + vHSV.x + vShift.x, HUE_MAX );
			#endif
			vHSV.yz = saturate( vHSV.yz * ( vec2( 1.f ) + vShift.yz ) );
			vColor.rgb = HSVtoRGB( vHSV );
			
			vColor.rgb = SampleColorCube( vColor.rgb, ColorCube );			
			
		    float Grey = dot( vColor.rgb, float3( 0.212671f, 0.715160f, 0.072169f ) ); 
		    vColor.rgb = lerp( float3(Grey, Grey, Grey), vColor.rgb, vIntel );

			return float4( vColor, .0f );
		}
		
	