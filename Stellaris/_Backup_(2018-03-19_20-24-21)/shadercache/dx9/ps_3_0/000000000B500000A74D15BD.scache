#define PIXEL_SHADER
#define SHADERQUALITY_HIGH
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
sampler TextureOne : register(s0);
sampler TextureTwo : register(s1);
float4x4 WorldViewProjectionMatrix : register(c0);
float4 vFirstColor : register(c4);
float4 vSecondColor : register(c5);
float CurrentState : register(c6);

struct VS_INPUT
{
	float4 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vTexCoord0 : TEXCOORD0;
};
		
		float4 main( VS_OUTPUT v ) : PDX_COLOR
		{
			float2 vDiff = 0.5f - v.vTexCoord0;
			float vAngle = atan2( vDiff.x, vDiff.y ) + 3.14159265f;
			
			float vLerp = saturate( ( vAngle - CurrentState* 3.14159265f * 2.f) * 50.f );
			float4 vOne = tex2D( TextureOne, v.vTexCoord0.xy );
			float4 vTwo = tex2D( TextureTwo, v.vTexCoord0.xy );
			return lerp( vOne, vTwo, vLerp );
		}
		
	