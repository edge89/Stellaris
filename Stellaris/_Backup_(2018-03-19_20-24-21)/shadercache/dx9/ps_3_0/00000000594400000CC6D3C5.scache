#define PIXEL_SHADER
#define SHADERQUALITY_HIGH
#define HAIR
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
sampler DiffuseMap : register(s0);
sampler SpecularMap : register(s1);
sampler NormalMap : register(s2);
sampler FlagMap : register(s3);
sampler EnvironmentMap : register(s4);
sampler LightIndexMap : register(s5);
sampler LightDataMap : register(s6);
sampler LavaNoise : register(s7);
sampler LavaDiffuse : register(s8);
sampler StoneDiffuse : register(s9);
sampler CustomTexture : register(s10);
sampler CustomTexture2 : register(s11);
sampler PortraitCharacter : register(s12);
sampler PortraitClothes : register(s13);
sampler PortraitHair : register(s14);
float4x4 ViewProjectionMatrix : register(c0);
float4 BATCHED_VARIABLES_1 : register(c4);
#define PortraitMipLevel BATCHED_VARIABLES_1.x
#define CustomDiffuseTexture BATCHED_VARIABLES_1.y

float4x4 WorldMatrix : register(c28);

float4 ShadowMapTextureMatrix0XAxis : register(c50);
float4 ShadowMapTextureMatrix0YAxis : register(c51);
float4 ShadowMapTextureMatrix0ZAxis : register(c52);
float4 ShadowMapTextureMatrix1XAxis : register(c53);
float4 ShadowMapTextureMatrix1YAxis : register(c54);
float4 ShadowMapTextureMatrix1ZAxis : register(c55);
float4 ShadowMapTextureMatrix2XAxis : register(c56);
float4 ShadowMapTextureMatrix2YAxis : register(c57);
float4 ShadowMapTextureMatrix2ZAxis : register(c58);
float4 ShadowMapTextureMatrix3XAxis : register(c59);
float4 ShadowMapTextureMatrix3YAxis : register(c60);
float4 ShadowMapTextureMatrix3ZAxis : register(c61);

struct VS_INPUT_PDXMESHSTANDARD
{
	float3 vPosition : POSITION;
	float3 vNormal : TEXCOORD0;
	float4 vTangent : TEXCOORD1;
	float2 vUV0 : TEXCOORD2;
	float2 vUV1 : TEXCOORD3;
};
struct VS_INPUT_PDXMESHSTANDARD_SKINNED
{
	float3 vPosition : POSITION;
	float3 vNormal : TEXCOORD0;
	float4 vTangent : TEXCOORD1;
	float2 vUV0 : TEXCOORD2;
	float2 vUV1 : TEXCOORD3;
	uint4 vBoneIndex : TEXCOORD4;
	float3 vBoneWeight : TEXCOORD5;
};
struct VS_OUTPUT_PDXMESHSTANDARD
{
	float4 vPosition : PDX_POSITION;
	float3 vNormal : TEXCOORD0;
	float3 vTangent : TEXCOORD1;
	float3 vBitangent : TEXCOORD2;
	float2 vUV0 : TEXCOORD3;
	float2 vUV1 : TEXCOORD4;
	float4 vPos : TEXCOORD5;
	float4 vSphere : TEXCOORD6;
};
struct VS_OUTPUT_PDXMESHSHADOW
{
	float4 vPosition : PDX_POSITION;
	float4 vDepthUV0 : TEXCOORD0;
};
struct VS_INPUT_DEBUGNORMAL
{
	float3 vPosition : POSITION;
	float3 vNormal : TEXCOORD0;
	float4 vTangent : TEXCOORD1;
	float2 vUV0 : TEXCOORD2;
	float2 vUV1 : TEXCOORD3;
	float vOffset : TEXCOORD6;
};
struct VS_INPUT_DEBUGNORMAL_SKINNED
{
	float3 vPosition : POSITION;
	float3 vNormal : TEXCOORD0;
	float4 vTangent : TEXCOORD1;
	float2 vUV0 : TEXCOORD2;
	float2 vUV1 : TEXCOORD3;
	uint4 vBoneIndex : TEXCOORD4;
	float3 vBoneWeight : TEXCOORD5;
	float vOffset : TEXCOORD6;
};
struct VS_OUTPUT_DEBUGNORMAL
{
	float4 vPosition : PDX_POSITION;
	float2 vUV0 : TEXCOORD0;
	float vOffset : TEXCOORD1;
};
struct VS_OUTPUT_PDXMESHNAVIGATIONBUTTON
{
	float4 vPosition : PDX_POSITION;
	float2 vUV0 : TEXCOORD0;
	float4 vPos : TEXCOORD1;
};
struct VS_OUTPUT_PDXMESHSHIELD
{
	float4 vPosition : PDX_POSITION;
	float2 vUV0 : TEXCOORD0;
	float4 vPos : TEXCOORD1;
};

// --------------------------------------------------------------
// ------------------    Light          -------------------------
// --------------------------------------------------------------
static const float3 SUN_DIFFUSE					= float3( 0.226f, 0.182f, 0.36f );


// --------------------------------------------------------------
// ------------------    HDR          	-------------------------
// --------------------------------------------------------------
static const float3 LUMINANCE_VECTOR  			= float3(0.2125f, 0.7154f, 0.0721f);


// --------------------------------------------------------------
// ------------------    Specular       -------------------------
// --------------------------------------------------------------
static const float SPECULAR_WIDTH 				= 15.0f;
static const float SPECULAR_MULTIPLIER			= 1.0f;
static const float MAP_SPECULAR_WIDTH 			= 15.0f;
static const float MAP_SPECULAR_MULTIPLIER		= 0.05f;


// --------------------------------------------------------------
// ------------------       ROADS       -------------------------
// --------------------------------------------------------------
static const float ROAD_TILE_FREQ				= 16.0f;
static const float ROAD_FADE_START				= 1.0f;
static const float ROAD_FADE_END				= 4.0f;

static const float ROAD_MAXIMAP_TILE_FREQ		= 30.f;
static const float ROAD_MAXIMAP_EXTRA_WIDTH		= 0.3f;

static const float ROAD_MINIMAP_TILE_FREQ		= 15.f;
static const float ROAD_MINIMAP_EXTRA_WIDTH		= 0.0f;


// --------------------------------------------------------------
// ------------------       COMBAT       ------------------------
// --------------------------------------------------------------
static const float COMBAT_OUTSIDE_BOUNDS_BRIGHTNESS	= 0.45f;
static const float COMBAT_INSIDE_BOUNDS_BRIGHTNESS	= 0.99f;
static const float COMBAT_BOUNDS_SHARPNESS 			= 0.1f;
static const float COMBAT_BOUNDS_BORDER_SHARPNESS	= 3.0f;


// --------------------------------------------------------------
// ------------------    WATER          -------------------------
// --------------------------------------------------------------
static const float 	WATER_TILE					= 1.8f;
static const float 	WATER_TIME_SCALE			= 0.03f;
static const float	WATER_FOG_START				= 16.5f;
static const float	WATER_FOG_END				= 19.7f;

static const float WATER_HEIGHT 				= 20.0f;
static const float WATER_HEIGHT_RECP 			= 1.0f / WATER_HEIGHT;
static const float WATER_HEIGHT_RECP_SQUARED 	= WATER_HEIGHT_RECP * WATER_HEIGHT_RECP;

static const float HEL_WATER_SCALE				= 1.2f;
static const float HEL_WATER_SPEED 				= 0.03f;
static const float HEL_WATER_GLOW_NOISE_SPEED	= 0.08f;
static const float HEL_WATER_GLOW_NOISE_SCALE   = 0.006f;


// --------------------------------------------------------------
// ------------------    SHADOW         -------------------------
// --------------------------------------------------------------
static const float  SHADOW_WEIGHT_TERRAIN    	= 1.0f;
static const float  SHADOW_WEIGHT_WATER   		= 1.0f;
static const float  SHADOW_WEIGHT_RIVER   		= 1.0f;
static const float  SHADOW_WEIGHT_TREE   		= 1.0f;
static const float  SHADOW_WEIGHT_ROAD   		= 1.0f;
static const float  SHADOW_WEIGHT_MESH   		= 1.0f;

// --------------------------------------------------------------
// -------------    RIM LIGHT (PDXMESH)   -----------------------
// --------------------------------------------------------------
static const float 	RIM_START 		= 0.6f;
static const float 	RIM_END 		= 1.0f;
static const float4 RIM_COLOR 		= float4( 0.3f, 0.6f, 0.8f, 0.0f );

float3 ToGamma(float3 aLinear)
{
	return pow(aLinear, vec3(0.45));
}

float3 ToLinear(float3 aGamma)
{
	return pow(aGamma, vec3(2.2));
}

float4 ToLinear(float4 aGamma)
{
	return float4(pow(aGamma.rgb, vec3(2.2)), aGamma.a);
}

static const int PDXMESH_MAX_INFLUENCE = 4;

	// Photoshop filters, kinda...
	float3 Hue( float H )
	{
		float X = 1 - abs( ( mod( H, 2 ) ) - 1 );
		if ( H < 1.0f )			return float3( 1.0f,    X, 0.0f );
		else if ( H < 2.0f )	return float3(    X, 1.0f, 0.0f );
		else if ( H < 3.0f )	return float3( 0.0f, 1.0f,    X );
		else if ( H < 4.0f )	return float3( 0.0f,    X, 1.0f );
		else if ( H < 5.0f )	return float3(    X, 0.0f, 1.0f );
		else					return float3( 1.0f, 0.0f,    X );
	}

	float3 HSVtoRGB( in float3 aHSV )
	{
		if ( aHSV.y != 0.0f )
		{
			float C = aHSV.y * aHSV.z;
			return clamp( Hue( aHSV.x ) * C + ( aHSV.z - C ), 0.0f, 1.0f );
		}
		return saturate( aHSV.zzz );
	}

	float3 RGBtoHSV( in float3 RGB )
	{
		float Cmax = max( RGB.r, max( RGB.g, RGB.b ) );
		float Cmin = min( RGB.r, min( RGB.g, RGB.b ) );
		float diff = Cmax - Cmin;

		float H = 0.0;
		float S = 0.0;
		if (diff != 0.0)
		{
			S = diff / Cmax;

			if (Cmax == RGB.r)
				H = (RGB.g - RGB.b) / diff + 6.0;
			else if (Cmax == RGB.g)
				H = (RGB.b - RGB.r) / diff + 2.0;
			else
				H = (RGB.r - RGB.g) / diff + 4.0;
		}

		return float3(H, S, Cmax);
	}


	float3 GetOverlay( float3 vColor, float3 vOverlay, float vOverlayPercent )
	{
		float3 res;
		res.r = vOverlay.r < .5 ? (2 * vOverlay.r * vColor.r) : (1 - 2 * (1 - vOverlay.r) * (1 - vColor.r));
		res.g = vOverlay.g < .5 ? (2 * vOverlay.g * vColor.g) : (1 - 2 * (1 - vOverlay.g) * (1 - vColor.g));
		res.b = vOverlay.b < .5 ? (2 * vOverlay.b * vColor.b) : (1 - 2 * (1 - vOverlay.b) * (1 - vColor.b));

		return lerp( vColor, res, vOverlayPercent );
	}

	float3 Levels( float3 vInColor, float vMinInput, float vMaxInput )
	{
		float3 vRet = saturate( vInColor - vMinInput );
		vRet /= vMaxInput - vMinInput;
		return saturate( vRet );
	}
		float3 UnpackRRxGNormal(float4 NormalMapSample)
	{
		float x = NormalMapSample.g * 2.0 - 1.0;
		float y = NormalMapSample.a * 2.0 - 1.0;
		y = -y;
		float z = sqrt(saturate(1.0 - x * x - y * y));
		return float3(x, y, z);
	}
	
	//#define PDX_FOUR_SPLITS
	#ifdef PDX_FOUR_SPLITS
	static const float2 shadowMapSize = float2(2048.0f, 2048.0f);
	#else
	static const float2 shadowMapSize = float2(3072.0f, 1024.0f);
	#endif

	float GetShadowPCF( float4 vShadowProj, float vZBias, sampler2DShadow ShadowSample )
	{
		float fShadowTerm1 = tex2Dproj( ShadowSample, vShadowProj ).r < (vShadowProj.z - vZBias) ? 0.0f : 1.0f;
		float fShadowTerm2 = tex2Dproj( ShadowSample, vShadowProj + float4( 1.0f / shadowMapSize.x, 0.0f, 0.0f, 0.0f ) ).r < (vShadowProj.z - vZBias) ? 0.0f : 1.0f;
		float fShadowTerm3 = tex2Dproj( ShadowSample, vShadowProj + float4( 0.0f, 1.0f / shadowMapSize.y, 0.0f, 0.0f ) ).r < (vShadowProj.z - vZBias) ? 0.0f : 1.0f;
		float fShadowTerm4 = tex2Dproj( ShadowSample, vShadowProj + float4( 1.0f / shadowMapSize.x, 1.0f / shadowMapSize.y, 0.0f, 0.0f ) ).r < (vShadowProj.z - vZBias) ? 0.0f : 1.0f;

		float2 f = frac(vShadowProj.xy * shadowMapSize);
		//return fShadowTerm1;
		return lerp(lerp(fShadowTerm1, fShadowTerm2, f.x), lerp(fShadowTerm3, fShadowTerm4, f.x), f.y);
	}

	float GetShadowMultiTap( float4 vShadowProj, float vZBias, sampler2DShadow ShadowSample )
	{
		float2 fTexelSize = float2(0.7f / shadowMapSize.x, 0.7f / shadowMapSize.y);
		float4 shadowFactor;
		shadowFactor.x = GetShadowPCF(vShadowProj + float4( -fTexelSize.x, 0.0f, 0.0f, 0.0f ), vZBias, ShadowSample);
		shadowFactor.y = GetShadowPCF(vShadowProj + float4( 0.0f, fTexelSize.y, 0.0f, 0.0f ), vZBias, ShadowSample);
		shadowFactor.z = GetShadowPCF(vShadowProj + float4( fTexelSize.x, 0.0f, 0.0f, 0.0f ), vZBias, ShadowSample);
		shadowFactor.w = GetShadowPCF(vShadowProj + float4( 0.0f, -fTexelSize.y, 0.0f, 0.0f ), vZBias, ShadowSample);
		return dot(shadowFactor, float4(0.25f, 0.25f, 0.25f, 0.25f));
	}

	float GetShadow( float4 vShadowProj, float vZBias, sampler2DShadow ShadowSample )
	{
	#define SHADOW_MULTI_TAP
	#ifdef SHADOW_MULTI_TAP
		return GetShadowMultiTap(vShadowProj, vZBias, ShadowSample);
	#else
		#ifdef SHADOW_PCF
			return GetShadowPCF(vShadowProj, vZBias, ShadowSample);
		#else
			return tex2Dproj(ShadowSample, vShadowProj).r < (vShadowProj.z - vZBias) ? 0.0f : 1.0f;
		#endif
	#endif
	}

	#ifdef PDX_FOUR_SPLITS
	static const float4 scale = float4(0.5, 0.5, 1, 1);
	static const float4 offset1 = float4(0.5, 0.0, 0, 0);
	static const float4 offset2 = float4(0.0, 0.5, 0, 0);
	static const float4 offset3 = float4(0.5, 0.5, 0, 0);
	#else
	static const float4 scale = float4(1.0 / 3.0, 1, 1, 1);
	static const float4 offset1 = float4(1.0 / 3.0, 0, 0, 0);
	static const float4 offset2 = float4(2.0 / 3.0, 0, 0, 0);
	#endif

	float CalculateShadowCascaded( float3 WorldSpacePos, sampler2DShadow ShadowMap_ )
	{
		float4 WorldPos = float4(WorldSpacePos, 1.0f);
		
		float zBias = 0.001f;
		float4 shadowCoord = float4(0, 0, 0, 1);
		shadowCoord.x = dot(ShadowMapTextureMatrix0XAxis, WorldPos);
		shadowCoord.y = dot(ShadowMapTextureMatrix0YAxis, WorldPos);
			
		float2 edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
		const float cutoff = 2.0f / 1024.0f;
		if (edge.x < cutoff || edge.y < cutoff)
		{
			shadowCoord.x = dot(ShadowMapTextureMatrix1XAxis, WorldPos);
			shadowCoord.y = dot(ShadowMapTextureMatrix1YAxis, WorldPos);
			
			edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
			if (edge.x < cutoff || edge.y < cutoff)
			{
				shadowCoord.x = dot(ShadowMapTextureMatrix2XAxis, WorldPos);
				shadowCoord.y = dot(ShadowMapTextureMatrix2YAxis, WorldPos);
				
	#ifdef PDX_FOUR_SPLITS
				edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
				if (edge.x < cutoff || edge.y < cutoff)
				{
					shadowCoord.x = dot(ShadowMapTextureMatrix3XAxis, WorldPos);
					shadowCoord.y = dot(ShadowMapTextureMatrix3YAxis, WorldPos);
					
					edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
					if (edge.x > cutoff && edge.y > cutoff)
					{
						shadowCoord.z = dot(ShadowMapTextureMatrix3ZAxis, WorldPos);
						shadowCoord = shadowCoord * scale + offset3;
					}
				}
				else
				{
					shadowCoord.z = dot(ShadowMapTextureMatrix2ZAxis, WorldPos);
					shadowCoord = shadowCoord * scale + offset2;
					zBias = 0.0006f;
				}
	#else				
				edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
				if (edge.x > cutoff && edge.y > cutoff)
				{
					shadowCoord.z = dot(ShadowMapTextureMatrix2ZAxis, WorldPos);
					shadowCoord = shadowCoord * scale + offset2;
					zBias = 0.0006f;
				}
	#endif
			}
			else
			{
				shadowCoord.z = dot(ShadowMapTextureMatrix1ZAxis, WorldPos);
				shadowCoord = shadowCoord * scale + offset1;
				zBias = 0.0004f;
			}
		}
		else
		{
			shadowCoord.z = dot(ShadowMapTextureMatrix0ZAxis, WorldPos);
			shadowCoord = shadowCoord * scale;
			zBias = 0.0003f;
		}
		
		return GetShadow(shadowCoord, zBias, ShadowMap_);
	}

	float3 CalculateShadowCascadedDebugColor( float3 WorldSpacePos )
	{
		float4 WorldPos = float4(WorldSpacePos, 1.0f);
		
		float3 retColor = float3(1,0,0);
		
		float2 shadowCoord;
		shadowCoord.x = dot(ShadowMapTextureMatrix0XAxis, WorldPos);
		shadowCoord.y = dot(ShadowMapTextureMatrix0YAxis, WorldPos);

		float2 edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
		const float cutoff = 2.0f / 1024.0f;
		if (edge.x < cutoff || edge.y < cutoff)
		{
			retColor = float3(0,1,0);
			
			shadowCoord.x = dot(ShadowMapTextureMatrix1XAxis, WorldPos);
			shadowCoord.y = dot(ShadowMapTextureMatrix1YAxis, WorldPos);
			
			edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
			if (edge.x < cutoff || edge.y < cutoff)
			{
				retColor = float3(0,0,1);
			
				shadowCoord.x = dot(ShadowMapTextureMatrix2XAxis, WorldPos);
				shadowCoord.y = dot(ShadowMapTextureMatrix2YAxis, WorldPos);
				
				edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
				if (edge.x < cutoff || edge.y < cutoff)
				{
	#ifdef PDX_FOUR_SPLITS
					retColor = float3(1,1,0);
					
					shadowCoord.x = dot(ShadowMapTextureMatrix3XAxis, WorldPos);
					shadowCoord.y = dot(ShadowMapTextureMatrix3YAxis, WorldPos);
								
					edge = min(shadowCoord.xy, float2(1.0, 1.0) - shadowCoord.xy);
					if (edge.x < cutoff || edge.y < cutoff)
					{
						retColor = float3(0,0,0);
					}
	#else
					retColor = float3(0,0,0);
	#endif
				}
			}
		}
		
		return retColor;
	}

			float3 ApplyDissolve( float3 vPrimaryColorIn, float vDissolveIn, float3 vColor, float3 vDiffuse, float2 vUV )
		{
			float vDissolveTex = tex2D( CustomTexture2, vUV ).r;
			float vTime = -vDissolveIn;
			//float vTime = saturate( frac( HdrRange_Time_ClipHeight.y ) * 1.1f );
			const float vTimeOffset = 1.3f;
			float vD = vTimeOffset - vTime * vTimeOffset - vDissolveTex - 0.01f;
			clip( vD );

			const float EDGE_SHARPNESS = 3.0f;
			const float EDGE_POW = 5.0f;
			const float COLOR_INTENSITY = 10.0f;

			float NdotU = dot( UnpackRRxGNormal( tex2D( NormalMap, vUV ) ).rgb, float3( 0.f, 1.f, 0.f ) ) * 0.5f + 0.5f;

			float3 AddColor = vPrimaryColorIn * COLOR_INTENSITY;
			return vColor + AddColor * NdotU * pow( saturate( 1.f - vD*EDGE_SHARPNESS ), EDGE_POW );
		}
			float4 main( VS_OUTPUT_PDXMESHSTANDARD In ) : PDX_COLOR
		{
			float4 UVLod = float4( (In.vUV0), 0.0, PortraitMipLevel * 0.35 );

			#ifdef CLOTHES
				float4 vDiffuse = tex2Dlod( PortraitClothes, UVLod );
			#else
				#ifdef HAIR
					float4 vDiffuse = tex2Dlod( PortraitHair, UVLod );
				#else
					float4 vDiffuse;
					if( CustomDiffuseTexture > 0.5f )
						vDiffuse = tex2Dlod( PortraitCharacter, UVLod );
					else
						vDiffuse = tex2Dlod( DiffuseMap, UVLod );
				#endif
			#endif

			return float4( ToGamma( vDiffuse.rgb ), vDiffuse.a );
		}

	