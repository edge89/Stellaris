#define PIXEL_SHADER
#define SHADERQUALITY_HIGH
#define IS_BORDER
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
sampler DiffuseTexture : register(s0);
float4 _TextColorAdd_ : register(c0);

float4x4 ViewProjectionMatrix : register(c1);
float4 BATCHED_VARIABLES_1 : register(c5);
#define vCamLookAtDir BATCHED_VARIABLES_1.xyz
#define vOpacity BATCHED_VARIABLES_1.w

struct VS_DEFAULT_TEXT_INPUT
{
	float4 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
	float4 vColor : COLOR;
};
struct VS_DEFAULT_TEXT_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vTexCoord : TEXCOORD0;
	float4 vColor : TEXCOORD1;
};
struct VS_INPUT
{
	float3 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float3 vPrepos : TEXCOORD0;
	float2 vTexCoord : TEXCOORD1;
};
	float4 DefaultFontTextureSample( in sampler2D _FontTexture_, float2	vTexCoord )
	{
	    float4 OutColor = tex2D( _FontTexture_, vTexCoord );
		OutColor.rgb += _TextColorAdd_.rgb;
		return OutColor;
	}

	float4 DefaultTextPixelShader( VS_DEFAULT_TEXT_OUTPUT v, in sampler2D _FontTexture_ )
	{
	    float4 OutColor = DefaultFontTextureSample( _FontTexture_, v.vTexCoord );
		OutColor *= v.vColor;
	    return OutColor;
	}
		float4 main( VS_OUTPUT v ) : PDX_COLOR
		{
			float4 vColor = DefaultFontTextureSample( DiffuseTexture, v.vTexCoord );

			//#ifdef IS_NEBULA
				vColor.a *= 0.25f;
			//#endif

			vColor.a *= vOpacity;

			return vColor;
		}
	