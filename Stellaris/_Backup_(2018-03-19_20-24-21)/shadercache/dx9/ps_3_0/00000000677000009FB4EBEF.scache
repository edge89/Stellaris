#define PIXEL_SHADER
#define SHADERQUALITY_HIGH
#define IS_ENVIRONMENT
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
sampler DiffuseTexture : register(s0);
sampler ColorCube : register(s1);
struct VS_INPUT
{
	float2 vPosition : POSITION;
	float2 vUV : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vUV : TEXCOORD0;
};
	float3 SampleColorCube( float3 aColor, in sampler2D ColorCubeSampler )
	{	
		float ColorCubeSize = 32.0;
		float scale = (ColorCubeSize - 1.0) / ColorCubeSize;
		float offset = 0.5 / ColorCubeSize;
		
		float x = ((scale * aColor.r + offset) / ColorCubeSize);
		float y = scale * aColor.g + offset;
		
		float zFloor = floor((scale * aColor.b + offset) * ColorCubeSize);
		float xOffset1 = zFloor / ColorCubeSize;
		float xOffset2 = min(ColorCubeSize - 1.0, zFloor + 1.0) / ColorCubeSize;
		
		float3 color1 = tex2D( ColorCubeSampler, float2(x + xOffset1, y) ).rgb;
		float3 color2 = tex2D( ColorCubeSampler, float2(x + xOffset2, y) ).rgb;
		
		float3 color = lerp(color1, color2, scale * aColor.b * ColorCubeSize - zFloor );
			
		return color;
	}
	
		float4 main( VS_OUTPUT v ) : PDX_COLOR
		{
			float4 vColor = tex2D( DiffuseTexture, v.vUV );

		#ifdef COLOR_LUT
			vColor.rgb = SampleColorCube( vColor.rgb, ColorCube );
		#endif
			
			return vColor;
		}
		
	