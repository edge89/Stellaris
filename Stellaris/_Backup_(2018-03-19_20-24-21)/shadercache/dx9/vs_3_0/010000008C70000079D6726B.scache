#define VERTEX_SHADER
#define SHADERQUALITY_HIGH
#define IS_BORDER
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
float4x4 ViewProjectionMatrix : register(c1);
float4 BATCHED_VARIABLES_1 : register(c5);
#define vCamLookAtDir BATCHED_VARIABLES_1.xyz
#define vOpacity BATCHED_VARIABLES_1.w

struct VS_DEFAULT_TEXT_INPUT
{
	float4 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
	float4 vColor : COLOR;
};
struct VS_DEFAULT_TEXT_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vTexCoord : TEXCOORD0;
	float4 vColor : TEXCOORD1;
};
struct VS_INPUT
{
	float3 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float3 vPrepos : TEXCOORD0;
	float2 vTexCoord : TEXCOORD1;
};
		VS_OUTPUT main( const VS_INPUT v )
		{
			VS_OUTPUT Out;

			float4 vPos = float4( v.vPosition, 1.0f );
			float4 vDistortedPos = vPos - float4( vCamLookAtDir * 0.5f, 0.0f );

			vPos = mul( ViewProjectionMatrix, vPos );

			// move z value slightly closer to camera to avoid intersections with terrain
			float vNewZ = dot( vDistortedPos, float4( GetMatrixData( ViewProjectionMatrix, 2, 0 ), GetMatrixData( ViewProjectionMatrix, 2, 1 ), GetMatrixData( ViewProjectionMatrix, 2, 2 ), GetMatrixData( ViewProjectionMatrix, 2, 3 ) ) );

			Out.vPosition = float4( vPos.xy, vNewZ, vPos.w );
			Out.vPrepos = v.vPosition.xyz;
			Out.vTexCoord = v.vTexCoord;

			return Out;
		}
	