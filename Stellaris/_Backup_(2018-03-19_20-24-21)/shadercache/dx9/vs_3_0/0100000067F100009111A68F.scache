#define VERTEX_SHADER
#define SHADERQUALITY_HIGH
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
float4x4 ViewProjectionMatrix : register(c0);
float3 vCamPos : register(c4);
float3 vCamRightDir : register(c5);
float3 vCamLookAtDir : register(c6);
float3 vCamUpDir : register(c7);
float3 HdrRange_Time_ClipHeight : register(c8);
float4 SystemLightPosRadius : register(c9);
float4 SystemLightColorFalloff : register(c10);
float3 SystemBackLightDiffuse : register(c11);
float4 BATCHED_VARIABLES_1 : register(c12);
#define AmbientDiffuse BATCHED_VARIABLES_1.xyz
#define CubemapIntensity BATCHED_VARIABLES_1.w
float3 CamLightDiffuse[3] : register(c13);
float3 RimLightDiffuse : register(c16);

float4x4 ProjectionMatrix : register(c32);

float4 BATCHED_VARIABLES_2 : register(c36);
#define HalfPixelWH BATCHED_VARIABLES_2.xy
#define RowsCols BATCHED_VARIABLES_2.zw
float2 Scale : register(c37);

float4x4 WorldMatrices[50] : register(c42);

struct VS_INPUT_PARTICLE
{
	float2 vUV0 : TEXCOORD0;
	float4 vPosSize : TEXCOORD1;
	float3 vRotation : TEXCOORD2;
	uint4 vTile : TEXCOORD3;
	float4 vColor : COLOR;
};
struct VS_INPUT_PARTICLETRAIL
{
	float3 vPos : POSITION;
	float2 vUV0 : TEXCOORD0;
	uint4 vTile : TEXCOORD1;
	float4 vColor : COLOR;
};
struct VS_OUTPUT_PARTICLE
{
	float4 vPosition : PDX_POSITION;
	float2 vUV0 : TEXCOORD0;
	float3 vPos : TEXCOORD1;
	float4 vColor : COLOR;
};

// --------------------------------------------------------------
// ------------------    Light          -------------------------
// --------------------------------------------------------------
static const float3 SUN_DIFFUSE					= float3( 0.226f, 0.182f, 0.36f );


// --------------------------------------------------------------
// ------------------    HDR          	-------------------------
// --------------------------------------------------------------
static const float3 LUMINANCE_VECTOR  			= float3(0.2125f, 0.7154f, 0.0721f);


// --------------------------------------------------------------
// ------------------    Specular       -------------------------
// --------------------------------------------------------------
static const float SPECULAR_WIDTH 				= 15.0f;
static const float SPECULAR_MULTIPLIER			= 1.0f;
static const float MAP_SPECULAR_WIDTH 			= 15.0f;
static const float MAP_SPECULAR_MULTIPLIER		= 0.05f;


// --------------------------------------------------------------
// ------------------       ROADS       -------------------------
// --------------------------------------------------------------
static const float ROAD_TILE_FREQ				= 16.0f;
static const float ROAD_FADE_START				= 1.0f;
static const float ROAD_FADE_END				= 4.0f;

static const float ROAD_MAXIMAP_TILE_FREQ		= 30.f;
static const float ROAD_MAXIMAP_EXTRA_WIDTH		= 0.3f;

static const float ROAD_MINIMAP_TILE_FREQ		= 15.f;
static const float ROAD_MINIMAP_EXTRA_WIDTH		= 0.0f;


// --------------------------------------------------------------
// ------------------       COMBAT       ------------------------
// --------------------------------------------------------------
static const float COMBAT_OUTSIDE_BOUNDS_BRIGHTNESS	= 0.45f;
static const float COMBAT_INSIDE_BOUNDS_BRIGHTNESS	= 0.99f;
static const float COMBAT_BOUNDS_SHARPNESS 			= 0.1f;
static const float COMBAT_BOUNDS_BORDER_SHARPNESS	= 3.0f;


// --------------------------------------------------------------
// ------------------    WATER          -------------------------
// --------------------------------------------------------------
static const float 	WATER_TILE					= 1.8f;
static const float 	WATER_TIME_SCALE			= 0.03f;
static const float	WATER_FOG_START				= 16.5f;
static const float	WATER_FOG_END				= 19.7f;

static const float WATER_HEIGHT 				= 20.0f;
static const float WATER_HEIGHT_RECP 			= 1.0f / WATER_HEIGHT;
static const float WATER_HEIGHT_RECP_SQUARED 	= WATER_HEIGHT_RECP * WATER_HEIGHT_RECP;

static const float HEL_WATER_SCALE				= 1.2f;
static const float HEL_WATER_SPEED 				= 0.03f;
static const float HEL_WATER_GLOW_NOISE_SPEED	= 0.08f;
static const float HEL_WATER_GLOW_NOISE_SCALE   = 0.006f;


// --------------------------------------------------------------
// ------------------    SHADOW         -------------------------
// --------------------------------------------------------------
static const float  SHADOW_WEIGHT_TERRAIN    	= 1.0f;
static const float  SHADOW_WEIGHT_WATER   		= 1.0f;
static const float  SHADOW_WEIGHT_RIVER   		= 1.0f;
static const float  SHADOW_WEIGHT_TREE   		= 1.0f;
static const float  SHADOW_WEIGHT_ROAD   		= 1.0f;
static const float  SHADOW_WEIGHT_MESH   		= 1.0f;

// --------------------------------------------------------------
// -------------    RIM LIGHT (PDXMESH)   -----------------------
// --------------------------------------------------------------
static const float 	RIM_START 		= 0.6f;
static const float 	RIM_END 		= 1.0f;
static const float4 RIM_COLOR 		= float4( 0.3f, 0.6f, 0.8f, 0.0f );

float3 ToGamma(float3 aLinear)
{
	return pow(aLinear, vec3(0.45));
}

float3 ToLinear(float3 aGamma)
{
	return pow(aGamma, vec3(2.2));
}

float4 ToLinear(float4 aGamma)
{
	return float4(pow(aGamma.rgb, vec3(2.2)), aGamma.a);
}
		VS_OUTPUT_PARTICLE main( const VS_INPUT_PARTICLE v )
		{
		  	VS_OUTPUT_PARTICLE Out;

			float2 offset = ( v.vUV0 - 0.5f ) * v.vPosSize.w * Scale.x;

			#ifdef NO_BILLBOARD
				float2 vSinCos;

				// Yaw
				sincos( v.vRotation.x * ( 3.14159265359f / 180.0f ), vSinCos.x, vSinCos.y );
				float3x3 R0 = Create3x3( 
								float3( vSinCos.y, 0, -vSinCos.x ), 
								float3( 0, 1, 0 ), 
								float3( vSinCos.x, 0, vSinCos.y ) );


				// Pitch
				sincos( v.vRotation.y * ( 3.14159265359f / 180.0f ), vSinCos.x, vSinCos.y );	
				float3x3 R1 = Create3x3( 
								float3( 1, 0, 0 ), 
								float3( 0, vSinCos.y, -vSinCos.x ), 
								float3( 0, vSinCos.x, vSinCos.y ) );

				// Roll
				sincos( v.vRotation.z * ( 3.14159265359f / 180.0f ), vSinCos.x, vSinCos.y );
				float3x3 R2 = Create3x3( 
								float3( vSinCos.y, -vSinCos.x, 0 ), 
								float3( vSinCos.x, vSinCos.y, 0 ), 
								float3( 0, 0, 1 ) );

				float3x3 R = mul( R1, R2 );
				R = mul( R0, R );

				float3 vOffset = float3( offset.x, offset.y, 0 );
				vOffset = mul( R, vOffset );

				float3 vScaledPos = v.vPosSize.xyz * Scale.y;
				float3 vNewPos = float3( vScaledPos.x + vOffset.x, vScaledPos.y + vOffset.y, vScaledPos.z + vOffset.z );
				float3 WorldPosition = mul( WorldMatrices[int(v.vTile.z)], float4( vNewPos, 1.0 ) ).xyz;
			#else
				float2 vSinCos;
				sincos( v.vRotation.z * ( 3.14159265359f / 180.0f ), vSinCos.x, vSinCos.y );
				offset = float2( 
				offset.x * vSinCos.y - offset.y * vSinCos.x, 
				offset.x * vSinCos.x + offset.y * vSinCos.y );

				float3 vScaledPos = v.vPosSize.xyz * Scale.y;
				float3 WorldPosition = mul( WorldMatrices[int(v.vTile.z)], float4( vScaledPos, 1.0 ) ).xyz;
			#endif

			Out.vPos = WorldPosition;
			Out.vPosition = mul( ViewProjectionMatrix, float4( WorldPosition, 1.0 ) );		

			#ifndef NO_BILLBOARD
				Out.vPosition.xy += offset * float2( ProjectionMatrix[0][0], ProjectionMatrix[1][1] );
			#endif
		
			Out.vColor = ToLinear(v.vColor);
			
			float2 tmpUV = float2( v.vUV0.x, 1.0f - v.vUV0.y );
			Out.vUV0 = HalfPixelWH + ( v.vTile.xy + tmpUV ) / RowsCols - HalfPixelWH * 2.0f * tmpUV;
			return Out;
		}
	