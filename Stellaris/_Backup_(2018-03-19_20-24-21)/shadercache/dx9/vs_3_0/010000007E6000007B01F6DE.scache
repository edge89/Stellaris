#define VERTEX_SHADER
#define SHADERQUALITY_HIGH
#define MASKING
#define PDX_DIRECTX_9

#define mod( X, Y ) ( X % Y )

#define GetMatrixData( Matrix, row, col ) ( Matrix [ row ] [ col ] )
#define FIX_FLIPPED_UV( X ) ( X )

#define sampler2DShadow sampler2D

float3x3 CastTo3x3( in float4x4 M )
{
	return (float3x3)M;
}
#define Create3x3 float3x3

float2 vec2(float vValue) { return float2(vValue, vValue); }
float3 vec3(float vValue) { return float3(vValue, vValue, vValue); }
float4 vec4(float vValue) { return float4(vValue, vValue, vValue, vValue); }

#define tex2Dlod0(samp,uv) tex2Dlod(samp, float4((uv), 0.0, 0.0))

#define PDX_POSITION POSITION

#define PDX_COLOR COLOR
float4x4 WorldViewProjectionMatrix : register(c0);
float4 ModulateColor : register(c4);
float4 BATCHED_VARIABLES_1 : register(c5);
#define Offset BATCHED_VARIABLES_1.xy
#define NextOffset BATCHED_VARIABLES_1.zw
float4 BATCHED_VARIABLES_2 : register(c6);
#define Time BATCHED_VARIABLES_2.x
#define AnimationTime BATCHED_VARIABLES_2.y
#define SymbolPos BATCHED_VARIABLES_2.zw
float4 BackgroundColor[4] : register(c7);
float4 BATCHED_VARIABLES_3 : register(c11);
#define SymbolSize BATCHED_VARIABLES_3.xy
#define BGPos BATCHED_VARIABLES_3.zw
float2 BGSize : register(c12);

struct VS_INPUT
{
	float3 vPosition : POSITION;
	float2 vTexCoord : TEXCOORD0;
};
struct VS_OUTPUT
{
	float4 vPosition : PDX_POSITION;
	float2 vTexCoord : TEXCOORD0;
	float2 vFullTexCoord : TEXCOORD1;
};
		VS_OUTPUT main(const VS_INPUT v )
		{
		    VS_OUTPUT Out;
		    Out.vPosition  = mul( WorldViewProjectionMatrix, float4( v.vPosition.xyz, 1 ) );
			
		    Out.vTexCoord = v.vTexCoord;
			Out.vTexCoord += Offset;
			
			Out.vFullTexCoord = saturate( v.vTexCoord * 1000.f );
			
		    return Out;
		}
	